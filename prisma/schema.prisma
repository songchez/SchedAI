generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id              String    @id @default(cuid())
  name            String?
  email           String    @unique
  emailVerified   DateTime?
  image           String?
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt
  accounts        Account[]
  sessions        Session[]
  chats           Chat[]      // 추가된 채팅 관계
  subscription    Subscription? // 구독 정보
  availableTokens Int    @default(5)
}


model Chat {
  id           String    @id @default(cuid())
  userId       String
  title        String    @default("새 채팅")  // AI가 생성한 제목
  messages     Json      // 대화 내용 저장 [{role: "user"|"assistant", content: "..."}]
  aiModel      String    @default("gemini-2.0-flash") // 사용된 AI 모델
  messageCount Int       @default(0)         // 총 메시지 수
  isArchived   Boolean   @default(false)     // 채팅 숨김 여부
  user         User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt

  @@index([userId, createdAt])
}


model Account {
  id                 String    @id @default(cuid())
  userId             String
  type               String
  provider           String
  providerAccountId  String
  refresh_token      String?  // Refresh Token
  access_token       String?  // Access Token
  expires_at         Int?     // Expiration Time
  token_type          String?  // 추가
  scope              String?  // 추가
  id_token           String?  // 추가
  user               User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  @@unique([provider, providerAccountId])
}

model Session {
  id           String    @id @default(cuid())
  sessionToken String    @unique
  userId       String
  expires      DateTime
  user         User      @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Subscription {
  id            String     @id @default(cuid())
  userId        String     @unique
  planType      String     @default("free") // "free" | "premium"
  startDate     DateTime
  endDate       DateTime?
  paymentStatus String     @default("inactive") // "active", "canceled"
  user          User       @relation(fields: [userId], references: [id])
}

model Billing {
  id          String    @id @default(uuid())
  bid         String    @unique
  userId      String    // 사용자 식별자
  cardNumber  String    // 마스킹된 카드번호 (예: 1234****5678)
  cardCompany String
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  isActive    Boolean   @default(true)
  Transaction Transaction[]
  nextPaymentDate DateTime?  // Optional로 변경
  billingInterval String?    // Optional로 변경
}

model Transaction {
  id          String   @id @default(uuid())
  billing     Billing  @relation(fields: [bid], references: [bid])
  bid         String
  amount      Int
  status      String   // paid, failed, cancelled -> scheduled 추가
  tid         String?
  approvedAt  DateTime?
  createdAt   DateTime @default(now())
  scheduledAt DateTime?  // 추가된 필드 (예약 결제용)
}